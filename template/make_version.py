#!/usr/bin/env python

import os
import sys

def gen_file(content, output_v):
	if os.path.isfile(output_v):
		with open(output_v, 'r') as fp:
			old = fp.read()
			if old == content:
				return False
	with open(output_v, 'w') as fp:
		fp.truncate()
		fp.write(content)
	return True

input_v, prefix, output_vh, output_vc = sys.argv[1:]

info = {}

info['prefix']       = prefix.upper().split('|')[-1]
info['version']      = open(input_v, 'r').read().strip()
info['svn_revision'] = 'Windows Revision'
info['svn_changed']  = 'Windows Changed'

content = \
'''
// Automatically generated by make_version.py, do not manually edit!

#ifndef _%(prefix)s_VERSION_H_
#define _%(prefix)s_VERSION_H_

const char %(prefix)s_VERSION[] = "%(version)s";
const char %(prefix)s_SVN_Revision[] = "%(svn_revision)s";
const char %(prefix)s_SVN_LastChanged[] = "%(svn_changed)s";

#endif // _%(prefix)s_VERSION_H_

''' % info

gen_file(content, output_vh)

content = \
'''
#include "version.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

const char* %(lower_p)s_version()
{   
    return %(upper_p)s_VERSION;
}

const char* %(lower_p)s_svn_revision()
{   
    return %(upper_p)s_SVN_Revision; 
}

const char* %(lower_p)s_svn_changed()
{   
    return %(upper_p)s_SVN_LastChanged;
}

#ifdef __cplusplus
}
#endif // __cplusplus

''' % {
	'lower_p': info['prefix'].lower(),
	'upper_p': info['prefix'].upper(),
}

gen_file(content, output_vc)

sys.exit(0)
